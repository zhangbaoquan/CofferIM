apply plugin: 'com.android.application'

/**
 *
 * Gradle 构建的三个性能指标：
 * - 全量编译 ： 全部编译 - Open Project
 * - 代码的增量编译：修改了Java/Kotlin下面的代码的时候编译
 * - 资源的增量编译：修改了res下面的资源文件的时候编译
 *
 * 发布APP到应用市场：多渠道打包/全部打包
 * 调试：不需要这么多，DEBUG
 */

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.android["testInstrumentationRunner"]
    }
    buildTypes {
        debug{
            // 自定义Gradle 常量
            buildConfigField("boolean","LOG_DEBUG","true")
            buildConfigField("String","LOG_TAG","\"coffer\"")
            buildConfigField("String","SP_NAME","\"config\"")
        }
        release {
            minifyEnabled false
            buildConfigField("boolean","LOG_DEBUG","false")
            buildConfigField("String","LOG_TAG","\"coffer\"")
            buildConfigField("String","SP_NAME","\"config\"")
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies["constraintlayout"]
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["runner"]
    androidTestImplementation rootProject.ext.dependencies["espresso"]

    implementation project(path: ':framework')
}
